# Generated by Django 4.2 on 2025-02-06 19:19

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Combo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('is_active', models.BooleanField(default=True)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('items', models.JSONField()),
                ('combos', models.JSONField(default=list)),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=8)),
                ('tax', models.DecimalField(decimal_places=2, max_digits=8)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('payment_pending', 'Payment Pending'), ('paid', 'Paid'), ('preparing', 'Preparing'), ('ready', 'Ready for Pickup'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('category', models.CharField(choices=[('snacks', 'Snacks'), ('drinks', 'Drinks'), ('sweets', 'Sweets'), ('meals', 'Meals'), ('desserts', 'Desserts'), ('combo', 'Combos')], max_length=50)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('is_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('stock_quantity', models.IntegerField(default=0)),
                ('cost_price', models.DecimalField(decimal_places=2, help_text='Cost price for profit calculation', max_digits=6)),
            ],
        ),
        migrations.CreateModel(
            name='SalesReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('report_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], max_length=20)),
                ('total_sales', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_orders', models.IntegerField()),
                ('total_items_sold', models.IntegerField()),
                ('average_order_value', models.DecimalField(decimal_places=2, max_digits=8)),
                ('total_discounts', models.DecimalField(decimal_places=2, max_digits=10)),
                ('gross_profit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('details', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('discount_type', models.CharField(choices=[('percentage', 'Percentage'), ('fixed', 'Fixed Amount'), ('bogo', 'Buy One Get One')], max_length=20)),
                ('discount_value', models.DecimalField(decimal_places=2, max_digits=5)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('min_purchase_amount', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('usage_limit', models.IntegerField(blank=True, null=True)),
                ('current_usage', models.IntegerField(default=0)),
                ('combos', models.ManyToManyField(blank=True, to='food_orders.combo')),
                ('products', models.ManyToManyField(blank=True, to='food_orders.product')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('payment_method', models.CharField(choices=[('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('cash', 'Cash'), ('mobile_payment', 'Mobile Payment')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='food_orders.order')),
            ],
        ),
        migrations.CreateModel(
            name='OrderPromotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discount_amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='food_orders.order')),
                ('promotion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='food_orders.promotion')),
            ],
        ),
        migrations.AddField(
            model_name='order',
            name='applied_promotions',
            field=models.ManyToManyField(through='food_orders.OrderPromotion', to='food_orders.promotion'),
        ),
        migrations.CreateModel(
            name='ComboProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('combo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='food_orders.combo')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='food_orders.product')),
            ],
            options={
                'unique_together': {('combo', 'product')},
            },
        ),
        migrations.AddField(
            model_name='combo',
            name='products',
            field=models.ManyToManyField(through='food_orders.ComboProduct', to='food_orders.product'),
        ),
    ]
